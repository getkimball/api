%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.16.2
-module(features_proto_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type 'KimballEvent'() ::
      #{namespace               => unicode:chardata(), % = 1, optional
        name                    => unicode:chardata(), % = 2, optional
        key                     => unicode:chardata() % = 3, optional
       }.

-type 'PredictionRequest'() ::
      #{namespace               => unicode:chardata(), % = 1, optional
        user_id                 => unicode:chardata(), % = 2, optional
        event_names             => [unicode:chardata()] % = 3, repeated
       }.

-type 'Prediction'() ::
      #{prediction_name         => unicode:chardata(), % = 1, optional
        yes                     => float() | integer() | infinity | '-infinity' | nan, % = 2, optional
        no                      => float() | integer() | infinity | '-infinity' | nan % = 3, optional
       }.

-type 'PredictionResponse'() ::
      #{predictions             => ['Prediction'()] % = 1, repeated
       }.

-type 'Response'() ::
      #{code                    => integer()        % = 1, optional, 32 bits
       }.

-export_type(['KimballEvent'/0, 'PredictionRequest'/0, 'Prediction'/0, 'PredictionResponse'/0, 'Response'/0]).
-type '$msg_name'() :: 'KimballEvent' | 'PredictionRequest' | 'Prediction' | 'PredictionResponse' | 'Response'.
-type '$msg'() :: 'KimballEvent'() | 'PredictionRequest'() | 'Prediction'() | 'PredictionResponse'() | 'Response'().
-export_type(['$msg_name'/0, '$msg'/0]).

-spec encode_msg('$msg'(), '$msg_name'()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []).

-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'KimballEvent' -> encode_msg_KimballEvent(id(Msg, TrUserData), TrUserData);
        'PredictionRequest' -> encode_msg_PredictionRequest(id(Msg, TrUserData), TrUserData);
        'Prediction' -> encode_msg_Prediction(id(Msg, TrUserData), TrUserData);
        'PredictionResponse' -> encode_msg_PredictionResponse(id(Msg, TrUserData), TrUserData);
        'Response' -> encode_msg_Response(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_KimballEvent(Msg, TrUserData) -> encode_msg_KimballEvent(Msg, <<>>, TrUserData).


encode_msg_KimballEvent(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{namespace := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{name := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{key := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                case is_empty_string(TrF3) of
                    true -> B2;
                    false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_PredictionRequest(Msg, TrUserData) -> encode_msg_PredictionRequest(Msg, <<>>, TrUserData).


encode_msg_PredictionRequest(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{namespace := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{user_id := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{event_names := F3} ->
            TrF3 = id(F3, TrUserData),
            if TrF3 == [] -> B2;
               true -> e_field_PredictionRequest_event_names(TrF3, B2, TrUserData)
            end;
        _ -> B2
    end.

encode_msg_Prediction(Msg, TrUserData) -> encode_msg_Prediction(Msg, <<>>, TrUserData).


encode_msg_Prediction(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{prediction_name := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{yes := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 0.0 -> B1;
                        true -> e_type_float(TrF2, <<B1/binary, 21>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{no := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                if TrF3 =:= 0.0 -> B2;
                   true -> e_type_float(TrF3, <<B2/binary, 29>>, TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_PredictionResponse(Msg, TrUserData) -> encode_msg_PredictionResponse(Msg, <<>>, TrUserData).


encode_msg_PredictionResponse(#{} = M, Bin, TrUserData) ->
    case M of
        #{predictions := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true -> e_field_PredictionResponse_predictions(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_Response(Msg, TrUserData) -> encode_msg_Response(Msg, <<>>, TrUserData).


encode_msg_Response(#{} = M, Bin, TrUserData) ->
    case M of
        #{code := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= 0 -> Bin;
                   true -> e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

e_field_PredictionRequest_event_names([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_PredictionRequest_event_names(Rest, Bin3, TrUserData);
e_field_PredictionRequest_event_names([], Bin, _TrUserData) -> Bin.

e_mfield_PredictionResponse_predictions(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Prediction(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_PredictionResponse_predictions([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_PredictionResponse_predictions(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_PredictionResponse_predictions(Rest, Bin3, TrUserData);
e_field_PredictionResponse_predictions([], Bin, _TrUserData) -> Bin.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('KimballEvent', Bin, TrUserData) -> id(decode_msg_KimballEvent(Bin, TrUserData), TrUserData);
decode_msg_2_doit('PredictionRequest', Bin, TrUserData) -> id(decode_msg_PredictionRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Prediction', Bin, TrUserData) -> id(decode_msg_Prediction(Bin, TrUserData), TrUserData);
decode_msg_2_doit('PredictionResponse', Bin, TrUserData) -> id(decode_msg_PredictionResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Response', Bin, TrUserData) -> id(decode_msg_Response(Bin, TrUserData), TrUserData).



decode_msg_KimballEvent(Bin, TrUserData) -> dfp_read_field_def_KimballEvent(Bin, 0, 0, 0, id([], TrUserData), id([], TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_KimballEvent(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_KimballEvent_namespace(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_KimballEvent(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_KimballEvent_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_KimballEvent(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_KimballEvent_key(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_KimballEvent(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{namespace => F@_1, name => F@_2, key => F@_3};
dfp_read_field_def_KimballEvent(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_KimballEvent(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_KimballEvent(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_KimballEvent(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_KimballEvent(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_KimballEvent_namespace(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_KimballEvent_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_KimballEvent_key(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_KimballEvent(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_KimballEvent(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_KimballEvent(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_KimballEvent(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_KimballEvent(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_KimballEvent(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{namespace => F@_1, name => F@_2, key => F@_3}.

d_field_KimballEvent_namespace(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_KimballEvent_namespace(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_KimballEvent_namespace(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_KimballEvent(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_KimballEvent_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_KimballEvent_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_KimballEvent_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_KimballEvent(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_KimballEvent_key(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_KimballEvent_key(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_KimballEvent_key(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_KimballEvent(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_KimballEvent(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_KimballEvent(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_KimballEvent(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_KimballEvent(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_KimballEvent(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_KimballEvent(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_KimballEvent(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_KimballEvent(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_KimballEvent(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_KimballEvent(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_KimballEvent(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_KimballEvent(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_KimballEvent(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_KimballEvent(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_PredictionRequest(Bin, TrUserData) -> dfp_read_field_def_PredictionRequest(Bin, 0, 0, 0, id([], TrUserData), id([], TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_PredictionRequest(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_PredictionRequest_namespace(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_PredictionRequest(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_PredictionRequest_user_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_PredictionRequest(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_PredictionRequest_event_names(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_PredictionRequest(<<>>, 0, 0, _, F@_1, F@_2, R1, TrUserData) -> #{namespace => F@_1, user_id => F@_2, event_names => lists_reverse(R1, TrUserData)};
dfp_read_field_def_PredictionRequest(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_PredictionRequest(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_PredictionRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_PredictionRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_PredictionRequest(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_PredictionRequest_namespace(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_PredictionRequest_user_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_PredictionRequest_event_names(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_PredictionRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_PredictionRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_PredictionRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_PredictionRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_PredictionRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_PredictionRequest(<<>>, 0, 0, _, F@_1, F@_2, R1, TrUserData) -> #{namespace => F@_1, user_id => F@_2, event_names => lists_reverse(R1, TrUserData)}.

d_field_PredictionRequest_namespace(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_PredictionRequest_namespace(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_PredictionRequest_namespace(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_PredictionRequest(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_PredictionRequest_user_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_PredictionRequest_user_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_PredictionRequest_user_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_PredictionRequest(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_PredictionRequest_event_names(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_PredictionRequest_event_names(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_PredictionRequest_event_names(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_PredictionRequest(RestF, 0, 0, F, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_PredictionRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_PredictionRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_PredictionRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_PredictionRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_PredictionRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_PredictionRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_PredictionRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PredictionRequest(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_PredictionRequest(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PredictionRequest(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_PredictionRequest(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_PredictionRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_PredictionRequest(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_PredictionRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_Prediction(Bin, TrUserData) -> dfp_read_field_def_Prediction(Bin, 0, 0, 0, id([], TrUserData), id(0.0, TrUserData), id(0.0, TrUserData), TrUserData).

dfp_read_field_def_Prediction(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_Prediction_prediction_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_Prediction(<<21, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_Prediction_yes(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_Prediction(<<29, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_Prediction_no(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_Prediction(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{prediction_name => F@_1, yes => F@_2, no => F@_3};
dfp_read_field_def_Prediction(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_Prediction(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_Prediction(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_Prediction(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_Prediction(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_Prediction_prediction_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        21 -> d_field_Prediction_yes(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        29 -> d_field_Prediction_no(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Prediction(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_Prediction(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_Prediction(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_Prediction(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_Prediction(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_Prediction(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{prediction_name => F@_1, yes => F@_2, no => F@_3}.

d_field_Prediction_prediction_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_Prediction_prediction_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_Prediction_prediction_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Prediction(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_Prediction_yes(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F, F@_1, _, F@_3, TrUserData) -> dfp_read_field_def_Prediction(Rest, Z1, Z2, F, F@_1, id(infinity, TrUserData), F@_3, TrUserData);
d_field_Prediction_yes(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F, F@_1, _, F@_3, TrUserData) -> dfp_read_field_def_Prediction(Rest, Z1, Z2, F, F@_1, id('-infinity', TrUserData), F@_3, TrUserData);
d_field_Prediction_yes(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F, F@_1, _, F@_3, TrUserData) -> dfp_read_field_def_Prediction(Rest, Z1, Z2, F, F@_1, id(nan, TrUserData), F@_3, TrUserData);
d_field_Prediction_yes(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F, F@_1, _, F@_3, TrUserData) -> dfp_read_field_def_Prediction(Rest, Z1, Z2, F, F@_1, id(Value, TrUserData), F@_3, TrUserData).

d_field_Prediction_no(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, _, TrUserData) -> dfp_read_field_def_Prediction(Rest, Z1, Z2, F, F@_1, F@_2, id(infinity, TrUserData), TrUserData);
d_field_Prediction_no(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, _, TrUserData) -> dfp_read_field_def_Prediction(Rest, Z1, Z2, F, F@_1, F@_2, id('-infinity', TrUserData), TrUserData);
d_field_Prediction_no(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, _, TrUserData) -> dfp_read_field_def_Prediction(Rest, Z1, Z2, F, F@_1, F@_2, id(nan, TrUserData), TrUserData);
d_field_Prediction_no(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, _, TrUserData) -> dfp_read_field_def_Prediction(Rest, Z1, Z2, F, F@_1, F@_2, id(Value, TrUserData), TrUserData).

skip_varint_Prediction(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_Prediction(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_Prediction(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_Prediction(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_Prediction(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_Prediction(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_Prediction(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Prediction(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_Prediction(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Prediction(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_Prediction(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_Prediction(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_Prediction(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_Prediction(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_PredictionResponse(Bin, TrUserData) -> dfp_read_field_def_PredictionResponse(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_PredictionResponse(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_PredictionResponse_predictions(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_PredictionResponse(<<>>, 0, 0, _, R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{predictions => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_PredictionResponse(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_PredictionResponse(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_PredictionResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_PredictionResponse(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_PredictionResponse(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_PredictionResponse_predictions(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_PredictionResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_PredictionResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_PredictionResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_PredictionResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_PredictionResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_PredictionResponse(<<>>, 0, 0, _, R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{predictions => lists_reverse(R1, TrUserData)}
    end.

d_field_PredictionResponse_predictions(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_PredictionResponse_predictions(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_PredictionResponse_predictions(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_Prediction(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_PredictionResponse(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_PredictionResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_PredictionResponse(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_PredictionResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_PredictionResponse(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_PredictionResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_PredictionResponse(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_PredictionResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PredictionResponse(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_PredictionResponse(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PredictionResponse(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_PredictionResponse(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_PredictionResponse(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_PredictionResponse(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_PredictionResponse(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_Response(Bin, TrUserData) -> dfp_read_field_def_Response(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_Response(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_Response_code(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_Response(<<>>, 0, 0, _, F@_1, _) -> #{code => F@_1};
dfp_read_field_def_Response(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_Response(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_Response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_Response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_Response(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_Response_code(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_Response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_Response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_Response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_Response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_Response(<<>>, 0, 0, _, F@_1, _) -> #{code => F@_1}.

d_field_Response_code(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_Response_code(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_Response_code(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_Response(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_Response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_Response(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_Response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_Response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_Response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_Response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_Response(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Response(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_Response(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Response(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_Response(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_Response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_Response(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_Response(Rest, Z1, Z2, F, F@_1, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'KimballEvent' -> merge_msg_KimballEvent(Prev, New, TrUserData);
        'PredictionRequest' -> merge_msg_PredictionRequest(Prev, New, TrUserData);
        'Prediction' -> merge_msg_Prediction(Prev, New, TrUserData);
        'PredictionResponse' -> merge_msg_PredictionResponse(Prev, New, TrUserData);
        'Response' -> merge_msg_Response(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_KimballEvent/3}).
merge_msg_KimballEvent(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{namespace := NFnamespace}} -> S1#{namespace => NFnamespace};
             {#{namespace := PFnamespace}, _} -> S1#{namespace => PFnamespace};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{name := NFname}} -> S2#{name => NFname};
             {#{name := PFname}, _} -> S2#{name => PFname};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{key := NFkey}} -> S3#{key => NFkey};
        {#{key := PFkey}, _} -> S3#{key => PFkey};
        _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_PredictionRequest/3}).
merge_msg_PredictionRequest(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{namespace := NFnamespace}} -> S1#{namespace => NFnamespace};
             {#{namespace := PFnamespace}, _} -> S1#{namespace => PFnamespace};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{user_id := NFuser_id}} -> S2#{user_id => NFuser_id};
             {#{user_id := PFuser_id}, _} -> S2#{user_id => PFuser_id};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {#{event_names := PFevent_names}, #{event_names := NFevent_names}} -> S3#{event_names => 'erlang_++'(PFevent_names, NFevent_names, TrUserData)};
        {_, #{event_names := NFevent_names}} -> S3#{event_names => NFevent_names};
        {#{event_names := PFevent_names}, _} -> S3#{event_names => PFevent_names};
        {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_Prediction/3}).
merge_msg_Prediction(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{prediction_name := NFprediction_name}} -> S1#{prediction_name => NFprediction_name};
             {#{prediction_name := PFprediction_name}, _} -> S1#{prediction_name => PFprediction_name};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{yes := NFyes}} -> S2#{yes => NFyes};
             {#{yes := PFyes}, _} -> S2#{yes => PFyes};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{no := NFno}} -> S3#{no => NFno};
        {#{no := PFno}, _} -> S3#{no => PFno};
        _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_PredictionResponse/3}).
merge_msg_PredictionResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{predictions := PFpredictions}, #{predictions := NFpredictions}} -> S1#{predictions => 'erlang_++'(PFpredictions, NFpredictions, TrUserData)};
        {_, #{predictions := NFpredictions}} -> S1#{predictions => NFpredictions};
        {#{predictions := PFpredictions}, _} -> S1#{predictions => PFpredictions};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_Response/3}).
merge_msg_Response(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{code := NFcode}} -> S1#{code => NFcode};
        {#{code := PFcode}, _} -> S1#{code => PFcode};
        _ -> S1
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'KimballEvent' -> v_msg_KimballEvent(Msg, [MsgName], TrUserData);
        'PredictionRequest' -> v_msg_PredictionRequest(Msg, [MsgName], TrUserData);
        'Prediction' -> v_msg_Prediction(Msg, [MsgName], TrUserData);
        'PredictionResponse' -> v_msg_PredictionResponse(Msg, [MsgName], TrUserData);
        'Response' -> v_msg_Response(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_KimballEvent/3}).
-dialyzer({nowarn_function,v_msg_KimballEvent/3}).
v_msg_KimballEvent(#{} = M, Path, TrUserData) ->
    case M of
        #{namespace := F1} -> v_type_string(F1, [namespace | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{name := F2} -> v_type_string(F2, [name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{key := F3} -> v_type_string(F3, [key | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (namespace) -> ok;
                      (name) -> ok;
                      (key) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_KimballEvent(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'KimballEvent'}, M, Path);
v_msg_KimballEvent(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'KimballEvent'}, X, Path).

-compile({nowarn_unused_function,v_msg_PredictionRequest/3}).
-dialyzer({nowarn_function,v_msg_PredictionRequest/3}).
v_msg_PredictionRequest(#{} = M, Path, TrUserData) ->
    case M of
        #{namespace := F1} -> v_type_string(F1, [namespace | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{user_id := F2} -> v_type_string(F2, [user_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{event_names := F3} ->
            if is_list(F3) ->
                   _ = [v_type_string(Elem, [event_names | Path], TrUserData) || Elem <- F3],
                   ok;
               true -> mk_type_error({invalid_list_of, string}, F3, [event_names | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (namespace) -> ok;
                      (user_id) -> ok;
                      (event_names) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_PredictionRequest(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'PredictionRequest'}, M, Path);
v_msg_PredictionRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'PredictionRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_Prediction/3}).
-dialyzer({nowarn_function,v_msg_Prediction/3}).
v_msg_Prediction(#{} = M, Path, TrUserData) ->
    case M of
        #{prediction_name := F1} -> v_type_string(F1, [prediction_name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{yes := F2} -> v_type_float(F2, [yes | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{no := F3} -> v_type_float(F3, [no | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (prediction_name) -> ok;
                      (yes) -> ok;
                      (no) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_Prediction(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'Prediction'}, M, Path);
v_msg_Prediction(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Prediction'}, X, Path).

-compile({nowarn_unused_function,v_msg_PredictionResponse/3}).
-dialyzer({nowarn_function,v_msg_PredictionResponse/3}).
v_msg_PredictionResponse(#{} = M, Path, TrUserData) ->
    case M of
        #{predictions := F1} ->
            if is_list(F1) ->
                   _ = [v_msg_Prediction(Elem, [predictions | Path], TrUserData) || Elem <- F1],
                   ok;
               true -> mk_type_error({invalid_list_of, {msg, 'Prediction'}}, F1, [predictions | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (predictions) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_PredictionResponse(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'PredictionResponse'}, M, Path);
v_msg_PredictionResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'PredictionResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_Response/3}).
-dialyzer({nowarn_function,v_msg_Response/3}).
v_msg_Response(#{} = M, Path, TrUserData) ->
    case M of
        #{code := F1} -> v_type_int32(F1, [code | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (code) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_Response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'Response'}, M, Path);
v_msg_Response(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Response'}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) -> mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) -> ok;
v_type_float(N, _Path, _TrUserData) when is_integer(N) -> ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) -> mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{msg, 'KimballEvent'},
      [#{name => namespace, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => name, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
       #{name => key, fnum => 3, rnum => 4, type => string, occurrence => optional, opts => []}]},
     {{msg, 'PredictionRequest'},
      [#{name => namespace, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => user_id, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
       #{name => event_names, fnum => 3, rnum => 4, type => string, occurrence => repeated, opts => []}]},
     {{msg, 'Prediction'},
      [#{name => prediction_name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => yes, fnum => 2, rnum => 3, type => float, occurrence => optional, opts => []},
       #{name => no, fnum => 3, rnum => 4, type => float, occurrence => optional, opts => []}]},
     {{msg, 'PredictionResponse'}, [#{name => predictions, fnum => 1, rnum => 2, type => {msg, 'Prediction'}, occurrence => repeated, opts => []}]},
     {{msg, 'Response'}, [#{name => code, fnum => 1, rnum => 2, type => int32, occurrence => optional, opts => []}]}].


get_msg_names() -> ['KimballEvent', 'PredictionRequest', 'Prediction', 'PredictionResponse', 'Response'].


get_group_names() -> [].


get_msg_or_group_names() -> ['KimballEvent', 'PredictionRequest', 'Prediction', 'PredictionResponse', 'Response'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) -> erlang:error({no_such_enum, EnumName}).


find_msg_def('KimballEvent') ->
    [#{name => namespace, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => name, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
     #{name => key, fnum => 3, rnum => 4, type => string, occurrence => optional, opts => []}];
find_msg_def('PredictionRequest') ->
    [#{name => namespace, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => user_id, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
     #{name => event_names, fnum => 3, rnum => 4, type => string, occurrence => repeated, opts => []}];
find_msg_def('Prediction') ->
    [#{name => prediction_name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => yes, fnum => 2, rnum => 3, type => float, occurrence => optional, opts => []},
     #{name => no, fnum => 3, rnum => 4, type => float, occurrence => optional, opts => []}];
find_msg_def('PredictionResponse') -> [#{name => predictions, fnum => 1, rnum => 2, type => {msg, 'Prediction'}, occurrence => repeated, opts => []}];
find_msg_def('Response') -> [#{name => code, fnum => 1, rnum => 2, type => int32, occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) -> erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) -> erlang:error({no_enum_defs, E, V}).



get_service_names() -> ['KimballIntegration'].


get_service_def('KimballIntegration') ->
    {{service, 'KimballIntegration'},
     [#{name => 'EventStream', input => 'KimballEvent', output => 'Response', input_stream => true, output_stream => false, opts => []},
      #{name => 'Prediction', input => 'PredictionRequest', output => 'PredictionResponse', input_stream => false, output_stream => false, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('KimballIntegration') -> ['EventStream', 'Prediction'];
get_rpc_names(_) -> error.


find_rpc_def('KimballIntegration', RpcName) -> find_rpc_def_KimballIntegration(RpcName);
find_rpc_def(_, _) -> error.


find_rpc_def_KimballIntegration('EventStream') -> #{name => 'EventStream', input => 'KimballEvent', output => 'Response', input_stream => true, output_stream => false, opts => []};
find_rpc_def_KimballIntegration('Prediction') -> #{name => 'Prediction', input => 'PredictionRequest', output => 'PredictionResponse', input_stream => false, output_stream => false, opts => []};
find_rpc_def_KimballIntegration(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_map(Def) -> Def;
        error -> erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"KimballIntegration">>) -> 'KimballIntegration';
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('KimballIntegration') -> <<"KimballIntegration">>;
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"KimballIntegration">>, <<"EventStream">>) -> {'KimballIntegration', 'EventStream'};
fqbins_to_service_and_rpc_name(<<"KimballIntegration">>, <<"Prediction">>) -> {'KimballIntegration', 'Prediction'};
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('KimballIntegration', 'EventStream') -> {<<"KimballIntegration">>, <<"EventStream">>};
service_and_rpc_name_to_fqbins('KimballIntegration', 'Prediction') -> {<<"KimballIntegration">>, <<"Prediction">>};
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"KimballEvent">>) -> 'KimballEvent';
fqbin_to_msg_name(<<"PredictionRequest">>) -> 'PredictionRequest';
fqbin_to_msg_name(<<"Prediction">>) -> 'Prediction';
fqbin_to_msg_name(<<"PredictionResponse">>) -> 'PredictionResponse';
fqbin_to_msg_name(<<"Response">>) -> 'Response';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('KimballEvent') -> <<"KimballEvent">>;
msg_name_to_fqbin('PredictionRequest') -> <<"PredictionRequest">>;
msg_name_to_fqbin('Prediction') -> <<"Prediction">>;
msg_name_to_fqbin('PredictionResponse') -> <<"PredictionResponse">>;
msg_name_to_fqbin('Response') -> <<"Response">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "features_proto.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["features_proto.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["features_proto"].


get_msg_containment("features_proto") -> ['KimballEvent', 'Prediction', 'PredictionRequest', 'PredictionResponse', 'Response'];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("features_proto") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("features_proto") -> ['KimballIntegration'];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("features_proto") -> [{'KimballIntegration', 'EventStream'}, {'KimballIntegration', 'Prediction'}];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("features_proto") -> [];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"PredictionRequest">>) -> "features_proto";
get_proto_by_msg_name_as_fqbin(<<"KimballEvent">>) -> "features_proto";
get_proto_by_msg_name_as_fqbin(<<"Response">>) -> "features_proto";
get_proto_by_msg_name_as_fqbin(<<"PredictionResponse">>) -> "features_proto";
get_proto_by_msg_name_as_fqbin(<<"Prediction">>) -> "features_proto";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"KimballIntegration">>) -> "features_proto";
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.16.2".

gpb_version_as_list() ->
    [4,16,2].
