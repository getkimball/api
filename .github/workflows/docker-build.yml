name: Docker Build Upload Deploy

on:
  push:
    branches:
      - trunk
    tags:
      - '*'
  pull_request:
    branches:
      - trunk

jobs:

  build_docker:
    runs-on: ubuntu-latest

    outputs:
      docker_tag: ${{ steps.set_docker_tag.outputs.docker_tag }}
      namespace: ${{ steps.set_docker_tag.outputs.namespace }}

    steps:
    - uses: actions/checkout@v1

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set image and deploy configuration
      id: set_docker_tag
      env:
        ECR_REPOSITORY: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.DOCKER_REPOSITORY }}
      run: |
        echo $GITHUB_REF
        if [[ $GITHUB_EVENT_NAME = "pull_request" ]]; then
          echo "##[set-output name=docker_tag;]$(echo pr-${GITHUB_SHA})"
          echo "##[set-output name=namespace;]getkimball-pr"
        elif [[ $GITHUB_REF = "refs/heads/trunk" ]]; then
          echo "##[set-output name=docker_tag;]$(echo ${GITHUB_REF##*/}-${GITHUB_SHA})"
          echo "##[set-output name=namespace;]getkimball"
        else
          echo "##[set-output name=docker_tag;]$(echo ${GITHUB_REF##*/})"
          echo "##[set-output name=namespace;]getkimball"
        fi

    - name: Build, tag, and push pull_request image to Amazon ECR
      env:
        DOCKER_ECR_TAG: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.DOCKER_REPOSITORY}}:${{ steps.set_docker_tag.outputs.docker_tag }}
      run: |
        docker build -t $DOCKER_ECR_TAG .
        docker push $DOCKER_ECR_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build_docker

    steps:
    - uses: actions/checkout@v1

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Helm install
      uses: getkimball/deploy-action@trunk
      env:
        DOCKER_TAG: ${{ needs.build_docker.outputs.docker_tag }}
        ECR_REPOSITORY: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.DOCKER_REPOSITORY }}

        SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

        KUBERNETES_NAMESPACE: ${{ needs.build_docker.outputs.namespace }}
        KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG }}

        PROMETHEUS_URL: ${{ secrets.PROMETHEUS_URL }}
        PROMETHEUS_USERNAME: ${{ secrets.PROMETHEUS_USERNAME }}
        PROMETHEUS_PASSWORD: ${{ secrets.PROMETHEUS_PASSWORD }}

        S3_BUCKET: getkimball-features-app
      with:
        command: |
          if [[ $GITHUB_EVENT_NAME = "pull_request" ]]; then
              SERVICE_TYPE=ClusterIP
              DAEMONSET_PORT=7233
              CLUSTER=pr
          else
              SERVICE_TYPE=LoadBalancer
              DAEMONSET_PORT=7232
              CLUSTER=demo
          fi

          cat << EOF > ./app.config
          [{cortex_remote_write, [
              {interval, 120000},
              {url, "${PROMETHEUS_URL}"},
              {username, "${PROMETHEUS_USERNAME}"},
              {password, "${PROMETHEUS_PASSWORD}"},
              {default_labels, [
                {"site", "kimball"},
                {"cluster", "${CLUSTER}"},
                {"mode", {env, "FEATURES_MODE"}},
                {"pod", {env, "KUBERNETES_POD_NAME"}}
              ]}
          ]},
           {prometheus, [{vm_msacc_collector_metrics, []},
                         {vm_system_info_collector_metrics,
                           [
                             ets_limit,
                             logical_processors,
                             logical_processors_available,
                             logical_processors_online,
                             port_count,
                             port_limit,
                             process_count,
                             process_limit,
                             schedulers,
                             schedulers_online,
                             smp_support,
                             threads,
                             thread_pool_size,
                             time_correction,
                             wordsize_bytes,
                             atom_count,
                             atom_limit
                        ]}]
           }
          ].
          EOF

          helm repo add getkimball https://getkimball.github.io/charts/stable
          helm upgrade kimball-api getkimball/kimball-api --install \
            --namespace ${KUBERNETES_NAMESPACE} \
            --create-namespace \
            --wait \
            --timeout 2m \
            --set image.repository="${ECR_REPOSITORY}" \
            --set image.tag=${DOCKER_TAG} \
            --set service.type=${SERVICE_TYPE} \
            --set kimball.sentry_dsn=${SENTRY_DSN} \
            --set kimball.daemonsetPort=${DAEMONSET_PORT} \
            --set kimball.s3_bucket=${S3_BUCKET} \
            --set-file kimball.app_config=app.config

  upload_to_quay:
    runs-on: ubuntu-latest
    needs: build_docker
    if: github.event_name != 'pull_request'

    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Download ECR image
      env:
        DOCKER_ECR_TAG: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.DOCKER_REPOSITORY }}:${{ needs.build_docker.outputs.docker_tag }}
      run: |
        echo ${DOCKER_ECR_TAG}
        docker pull ${DOCKER_ECR_TAG}

    - name: Docker Login - Quay
      uses: azure/docker-login@v1
      with:
        login-server: quay.io
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_PASSWORD }}

    - name: Upload to Quay
      env:
        DOCKER_ECR_TAG: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.DOCKER_REPOSITORY }}:${{ needs.build_docker.outputs.docker_tag }}
        DOCKER_QUAY_TAG: quay.io/getkimball/api:${{ needs.build_docker.outputs.docker_tag }}
      run: |
        docker tag ${DOCKER_ECR_TAG} ${DOCKER_QUAY_TAG}
        docker push ${DOCKER_QUAY_TAG}
